h1=. pOtatO

~~
h1=. 9 rules for a better OO

~~
h1=. Disclaimer

p=. These constraints are intended to be excessively restrictive, to force you out of _the procedural groove_. 

p=. Approach them with an open mind. 

p=. Applying these techniques will improve your code quickly toward a better object orientation.
~~
h4>. Rule #1

h2=. Use only one level of indentation per method.

If you need more than one level, you need to create a second method and call it from the first.

pre(sh_java). 
//no
void calculateSalary() {
     for (Employee e : getEmployees()) {
           if (e.getStatus() == "FTE") {
              if (e.getSalaryBand() == "A")
                  calculateFTEBandASalary(p);
           } // more band checking below... //
     }
}
//yes
void calculateSalary() {
     for (Employee e: getEmployees()) {
         calculateSalaryWithStatusAndBand(e);
     }
}

~~
h4>. Rule #2

h2=. Don't use the 'else' keyword

Test for a condition with an if-statement and exit the routine if it’s not met. 

This prevents if-else chaining; and *every routine does just one thing*: Single Responsibility principle.
~~

h4>. Rule #3

h2=. Wrap all primitives and strings

This directly addresses _primitive obsession._ 

If you want to use an integer, you first have to create a class (even an inner class) to identify it’s true role. 

*Zip codes are objects not an integer*, for example. 

This makes for far clearer and more testable code.

~~
h4>. Rule #4

h2=. Use only one dot per line

This step prevents you from reaching deeply into other objects to get at fields or methods, and thereby conceptually breaking encapsulation.

pre(sh_java). 
getPerson().getPatient().getCurrentAddress();

~~

h4>. Rule #5

h2=. Don’t abbreviate names

If you have to type the full name of a method or variable, you’re likely to spend more time thinking about its name. 

When you think about the name, you will avoid...

pre(sh_java). 
//having this
new Order().shipOrder();
//instead of:
new Order().ship();

~~

h4>. Rule #6

h1=. Keep entities small

Classes with 50 lines max!

Packages with 10 classes max!

Not only does it force concision and keep classes focused, but it means most classes can fit on a single screen in any editor/IDE.

~~

h4>. Rule #7

h1=. No more than 2 instance variables per class

_This is perhaps the hardest rule._

With more than two instance variables, there is almost certainly a reason to subgroup some variables into a separate class. 

~~

h4>. Rule #8

h1=. Use first-class collections

Any class that contains a collection should contain no other member variables. 

The idea is an extension of primitive obsession. If you need a class that’s a subsumes the collection, then write it that way.

~~

h4>. Rule #9

h1=. Don’t use _setters_ or _getters_

This is a radical approach to enforcing encapsulation. 

It also requires implementation of dependency injection approaches and adherence to the maxim _tell, don’t ask._

This is an awesome step towards functional programming.

~~

h1=. True story.

!twa.jpg!
